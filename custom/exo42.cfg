[mcu]
serial: /dev/serial/by-path/platform-fd840000.usb-usb-0:1:1.0

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 2500
max_z_velocity: 10
max_z_accel: 50
minimum_cruise_ratio: 0.5
square_corner_velocity: 5

# Slot X(X) pour moteur X
[stepper_x]
step_pin: PD0
dir_pin: PD1
enable_pin: !PA15
rotation_distance: 40
endstop_pin: ^!PB19
position_endstop: 0
microsteps: 64
homing_speed: 200
position_max: 420

# Slot Yr(Y) pour moteur Y1 gauche
[stepper_y]
step_pin: PB26
dir_pin: PA14
enable_pin: !PC1
rotation_distance: 40
endstop_pin: ^!PB18
microsteps: 64
homing_speed: 200
position_endstop: 420
position_max: 420

# Slot Ya/Zag(Z1) pour moteur Y2 droit
[stepper_y1]
step_pin: !PC3
dir_pin: !PC2
enable_pin: !PC5
rotation_distance: 40
endstop_pin: ^!PA6
microsteps: 64

# Slot Zad(Z2) pour moteur Z1 avant gauche
[stepper_z]
step_pin: PC7
dir_pin: PC6
enable_pin: !PC8
rotation_distance: 4.0442666666666666666664
endstop_pin: probe:z_virtual_endstop
position_max: 425
position_min: -8
microsteps: 16
homing_speed: 15

# Slot Zg(E0) pour moteur Z2 arrière gauche
[stepper_z1]
step_pin: PC16
dir_pin: PC17
enable_pin: !PC15
rotation_distance: 4.0442666666666666666664
endstop_pin: probe:z_virtual_endstop
microsteps: 16

# Slot Zd(Z4) pour moteur Z3 arrière droit
[stepper_z2]
step_pin: PC19
dir_pin: PC4
enable_pin: !PC18
rotation_distance: 4.0442666666666666666664
endstop_pin: probe:z_virtual_endstop
microsteps: 16

# Slot E0 pour moteur Z4 avant droit
[stepper_z3]
step_pin: PA19
dir_pin: PC9
enable_pin: !PA20
rotation_distance: 4.0442666666666666666664
endstop_pin: probe:z_virtual_endstop
microsteps: 16

# Slot E1 pour moteur E0 extrudeur
[extruder]
step_pin: PC13
dir_pin: !PC14
enable_pin: !PC12
rotation_distance: 8.7671232876712328767123287671233
filament_diameter: 1.75
heater_pin: PC28
sensor_type: PT100 INA826
sensor_pin: PB20
min_temp: 2
max_temp: 350
min_extrude_temp: 10
pressure_advance: 0.0375
pressure_advance_smooth_time: 0.040
Max_extrude_only_distance: 250
microsteps: 16
nozzle_diameter: 0.4

# Peripheral configurations

[filament_switch_sensor Detecteur_filament]
switch_pin: ^PD4
pause_on_runout: True
runout_gcode: G0 E-200 F400
insert_gcode:
  G92 E0.0
  G0 E25 F150
  M109 S220
  M83
  G92 E0.0
  G0 E150 F300
  G92 E0.0
  M82
  M84
[heater_bed]
heater_pin: PB25
sensor_type: Generic 3950
sensor_pin: PA16
min_temp: 0
max_temp: 150

[fan]
pin: PC25

[heater_fan Extrudeur]
pin: PC24
#tachometer_pin: PC15
heater_temp: 40
max_power: 1

[controller_fan Electronique]
pin: PC21
idle_timeout: 60

[fan_generic _Capot]
pin: PC23

[fan_generic _Alimentation]
pin: !PC22
hardware_pwm: false
max_power: 1
shutdown_speed: 1

[temperature_sensor Alimentation]
sensor_type: PT100 INA826
sensor_pin: PA2
min_temp: 0
max_temp: 60
gcode_id: power

[temperature_sensor Protection]
sensor_type: Generic 3950
sensor_pin: PA24
min_temp: 0
max_temp: 65
gcode_id: prot

[temperature_sensor Chambre]
sensor_type: Generic 3950
sensor_pin: PA22
min_temp: 0
max_temp: 60
gcode_id: room

[led Eclairage_LEDs]
red_pin:PD7
green_pin:PD8
blue_pin:PB27
hardware_pwm: True
initial_RED: 0.0
initial_GREEN: 1.0
initial_BLUE: 0.0

[output_pin Palpeur]
pin: PD3
value: 0

[probe]
pin: !PD5
deactivate_on_each_sample: False
x_offset: 0.0
y_offset: 50.0
#z_offset: 0.0
speed: 5.0
activate_gcode:
  Palpeur_ON
  G4 P500
deactivate_gcode:
  Palpeur_OFF

[gcode_button stop_button]
pin: ^!PB12
press_gcode: {action_emergency_stop()}

#[gcode_button Porte]
#pin: ^!PD10
#press_gcode: PAUSE

[safe_z_home]
home_xy_position: 10,10
z_hop: 2
z_hop_speed: 15

[bed_mesh]
horizontal_move_z: 3
mesh_min: 10,60
mesh_max: 410,410
probe_count: 5,5
fade_start: 0.5
fade_end : 3

[quad_gantry_level]
gantry_corners:
   10, 10
   410, 360
points:
   10, 10
   10, 360
   410, 360
   410, 10
max_adjust: 10
retries: 10
retry_tolerance: 0.01
########################################
# Macro configuration
########################################

[idle_timeout]
timeout: 259200	# 3 jours (72*60*60 secondes)

[delayed_gcode manage_fans]
initial_duration: 0.1
gcode:
	{% set sysstate = printer["idle_timeout"] %}
	{% if sysstate.state == "Printing" %}
		{% set chambersensor = printer["temperature_sensor Chambre"] %}
		{% set capotfanspeed = (chambersensor.temperature*2.3)/100 %}
		{% if capotfanspeed > 1 %}
			{% set capotfanspeed = 1 %}
		{% endif %}
		{% if capotfanspeed < 0 %}
			{% set capotfanspeed = 0 %}
		{% endif %}
		SET_FAN_SPEED FAN=_Capot SPEED={capotfanspeed}
	{% endif %}
	{% set alimsensor = printer["temperature_sensor Alimentation"] %}
	{% set alimfanspeed = (alimsensor.temperature*1.5)/100 %}
	{% if alimfanspeed > 1 %}
		{% set alimfanspeed = 1 %}
	{% endif %}
	{% if alimfanspeed < 0.2 %}
		{% set alimfanspeed = 0.2 %}
	{% endif %}
	SET_FAN_SPEED FAN=_Alimentation SPEED={alimfanspeed}
	UPDATE_DELAYED_GCODE ID=manage_fans DURATION=15

[delayed_gcode load_bedmesh]
initial_duration: 1
gcode:
	BED_MESH_PROFILE LOAD=default

[gcode_macro T0]
description: Avoid display a warning if slicer put T0 in gcode
gcode: 

[gcode_macro M600]
description: GCODE de changement de filament (compatibilité)
gcode: 
	PAUSE
	M83
	G92 E0.0
	G0 E-150 F300
	G92 E0.0
	M82

[gcode_macro M601]
description: GCODE de pause impression (compatibilité)
gcode: 
	PAUSE

[gcode_macro M300]
description: GCODE de beep (compatibilité)
gcode: 

[gcode_macro CHARGER_FILAMENT]
description: Charger un filament en chauffant la tête puis en extrudant 150mm de fil à 220°C.
gcode:
	LOAD_FILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
	{% if not printer.pause_resume.is_paused %}
		M109 S220
	{% endif %}
	M83
	G92 E0.0
	G0 E150 F300
	G92 E0.0
	M82
	{% if not printer.pause_resume.is_paused %}
		M84
	{% endif %}

[gcode_macro EJECTER_FILAMENT]
description: Ejecter un filament en chauffant la tête puis en retractant 150mm de fil à 220°C.
gcode:
	UNLOAD_FILAMENT

[gcode_macro UNLOAD_FILAMENT]
gcode:
	{% if not printer.pause_resume.is_paused %}
		M109 S220
	{% endif %}
	M83
	G92 E0.0
	G0 E-150 F300
	G92 E0.0
	M82
	{% if not printer.pause_resume.is_paused %}
		M84
	{% endif %}

[gcode_macro ETALONNAGE_COMPLET]
description: Etalonnage complet de la machine, Parallélisme + Surface + Chauffe tête + Chauffe lit.
gcode:
	G28
	QUAD_GANTRY_LEVEL
	BED_MESH_CALIBRATE PROFILE=default
	PID_CALIBRATE HEATER=extruder TARGET=220
	PID_CALIBRATE HEATER=heater_bed TARGET=80
	SAVE_CONFIG

[gcode_macro ETALONNAGE_PARALLELISME]
description: Etalonnage du parallélisme des 4 axes Z.
gcode:
	G28
	QUAD_GANTRY_LEVEL

[gcode_macro ETALONNAGE_SURFACE]
description: Etalonnage de Surface du lit.
gcode:
	G28
	BED_MESH_CALIBRATE PROFILE=default

[gcode_macro CALIBRATION_TETE]
description: Calibration de la chauffe de la tête (PID : important).
gcode:
	PID_CALIBRATE HEATER=extruder TARGET=230
	SAVE_CONFIG

[gcode_macro CALIBRATION_LIT]
description: Calibration de la chauffe du lit (PID : important).
gcode:
	PID_CALIBRATE HEATER=heater_bed TARGET=80
	SAVE_CONFIG

[gcode_macro Palpeur_ON]
description: Sortir le palpeur
gcode:
	SET_PIN PIN=Palpeur VALUE=1 # Probe deploy command

[gcode_macro Palpeur_OFF]
description: Rentrer le palpeur
gcode:
	SET_PIN PIN=Palpeur VALUE=0 # Probe stow command

[gcode_macro START_PRINT]
description: Start a new running print
gcode:
	BED_MESH_PROFILE LOAD=default
	SET_LED LED="Eclairage_LEDs" RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1
	M117 Demarrage
	M107
	{% if params.BED is defined %}
		{% set bedtemp = params.BED|default(0)|int %}
	{% else %}
		{% set bedtemp = 0 %}
	{% endif %}
	{% if params.EXTRUDER is defined %}
		{% set e0temp = params.EXTRUDER|default(0)|int %}
	{% else %}
		{% set e0temp = 0 %}
	{% endif %}
	M140 S{bedtemp}
	M104 T0 S{e0temp}
	G90
	M82
	G28
	G92 E0
	G1 Z3 F800
	{% if params.WAITBED is defined %}
		M190 S{bedtemp}
	{% endif %}
	M109 T0 S{e0temp}
	M117 Impression

[gcode_macro END_PRINT]
gcode:
	SET_LED LED="Eclairage_LEDs" RED=0 GREEN=0 BLUE=1 SYNC=0 TRANSMIT=1
	TURN_OFF_HEATERS
	M107
	{% set maxY = printer.configfile.config.stepper_y.position_max %}
	G1 X0 Y{maxY} F21000
	M84

[gcode_macro CALIBRATION_ZV]
description: Lancer une calibration de l'Input Shaping avec l'accéléromètre. ATTENTION : ne pas lancer cette procédure trop souvent, la machine étant soumise à de fortes vibrations durant le test.
gcode:
	G28
	G1 Z20
	G4 S5
	SHAPER_CALIBRATE AXIS=X
	SHAPER_CALIBRATE AXIS=Y
	SAVE_CONFIG

[gcode_macro ETEINDRE_MOTEURS]
description: Eteindre les moteurs qui sont sous tension.
gcode:
	M84

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  SET_LED LED="Eclairage_LEDs" RED=1 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
  ##### get user parameters or use default #####
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set allow_park = False if not macro_found
                 else False if client.park_at_cancel is not defined
                 else True  if client.park_at_cancel|lower == 'true'
                 else False %}
  {% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
  ##### define park position #####
  {% set park_x = ""                                    if not macro_found
             else ""                                    if client.park_at_cancel_x is not defined
             else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
  {% set park_y = ""                                    if not macro_found
             else ""                                    if client.park_at_cancel_y is not defined
             else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
  {% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
  ##### end of definitions #####
#  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  {% if (not printer.pause_resume.is_paused) %} _TOOLHEAD_PARK_PAUSE_CANCEL {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{'enable': False, 'call':"PAUSE"}}"
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{'enable': False, 'layer': 0, 'call':"PAUSE"}}"
  CANCEL_PRINT_BASE
  {% set maxY = printer.configfile.config.stepper_y.position_max %}
  G1 X1 Y{maxY} F9000
  M84

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
	PAUSE_BASE
	_TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### get user parameters or use default #####
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
  ##### end of definitions #####
  _CLIENT_EXTRUDE
  RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
  
# Usage: SET_PAUSE_NEXT_LAYER [MACRO=<name>]
[gcode_macro PAUSE_PROCHAINE_COUCHE]
description: Enable a pause if the next layer is reached
gcode:
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{'enable':True, 'call':params.MACRO|default("PAUSE")}}"

# Usage: SET_PAUSE_AT_LAYER [LAYER=<number>] [MACRO=<name>]
[gcode_macro PAUSE_A_LA_COUCHE]
description: Enable/disable a pause if a given layer number is reached
gcode:
	{% if params.LAYER is defined %}
		SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{'enable': True, 'layer':params.LAYER|int, 'call':params.MACRO|default("PAUSE")}}"
	{% else %}
		SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{'enable': False, 'layer':0, 'call':"PAUSE"}}"
	{% endif %}

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature 
variable_pause_next_layer: {'enable':False, 'call':"PAUSE"}
variable_pause_at_layer  : {'enable':False, 'layer':0, 'call':"PAUSE"}
gcode:
  {% if pause_next_layer.enable %}
    {action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{'enable': False, 'call':"PAUSE"}}"
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    {action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{'enable': False, 'layer': 0, 'call':"PAUSE"}}"
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
  
##### internal use #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = False if not macro_found
                     else False if client.use_custom_pos is not defined
                     else True  if client.use_custom_pos|lower == 'true'
                     else False %}
  {% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
  {% set park_dz        = 10.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
  {% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
  {% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
#  {% if "xyz" in printer.toolhead.homed_axes %}
#    G90
#    G1 Z{z_park} F{sp_hop}
#    G1 X{x_park} Y{y_park} F{sp_move}
#    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
#  {% else %}
#    {action_respond_info("Printer not homed")}
#  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F600
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
  
[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set use_fw_retract = False if not macro_found
                     else False if client.use_fw_retract is not defined
                     else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
                     else False %}

  {% set length = (params.LENGTH|float) if params.LENGTH is defined
             else 1.0 if not macro_found
             else client.unretract|default(1.0) %}

  {% set speed = params.SPEED if params.SPEED is defined
            else 35 if not macro_found
            else client.speed_unretract|default(35) %}

  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}

  {% if printer.extruder.can_extrude %}
    {% if use_fw_retract %}
      {% if length < 0 %}
        G10
      {% else %}
        G11
      {% endif %}
    {% else %}
      M83
      G1 E{length} F{(speed|float|abs) * 60}
      {% if absolute_extrude %}
        M82
      {% endif %}
    {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}

  {% set length = (params.LENGTH|float) if params.LENGTH is defined
             else 1.0 if not macro_found
             else client.retract|default(1.0) %}

  {% set speed = params.SPEED if params.SPEED is defined
            else 35 if not macro_found
            else client.speed_retract|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[pause_resume]

[display_status]


[include moonraker_obico_macros.cfg]
#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 65.681
#*# pid_ki = 0.396
#*# pid_kd = 2721.667
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 32.972
#*# pid_ki = 2.818
#*# pid_kd = 96.442
#*#
#*# [probe]
#*# z_offset = 0.970
#*#
#*# [input_shaper]
#*# shaper_type_x = mzv
#*# shaper_freq_x = 45.0
#*# shaper_type_y = zv
#*# shaper_freq_y = 32.2
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	0.017694, 0.069511, 0.109954, 0.065719, 0.061928
#*# 	-0.017694, 0.049290, 0.136494, 0.031596, 0.055609
#*# 	-0.005055, 0.018958, 0.099843, 0.049290, -0.018957
#*# x_count = 5
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 10.0
#*# max_x = 616.0
#*# min_y = 10.0
#*# max_y = 300.0
